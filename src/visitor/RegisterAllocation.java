package visitor;
//
// Generated by JTB 1.3.2
//

import syntaxtree.*;

import java.util.Enumeration;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class RegisterAllocation<R,A> extends GJDepthFirst<R,A> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //

    HashMap<String,CFG>globalCFGs;
    CFG currentCFG;


    public R visit(NodeList n, A argu) {
        R _ret=null;
        int _count=0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n, A argu) {
        if ( n.present() ) {
            R _ret=null;
            int _count=0;
            ArrayList<R> list = new ArrayList<>();
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                list.add(e.nextElement().accept(this,argu));
                _count++;
            }
            return (R)list;
        }
        else
            return null;
    }

    public R visit(NodeOptional n, A argu) {
        if ( n.present() )
            return n.node.accept(this,argu);
        else
            return null;
    }

    public R visit(NodeSequence n, A argu) {
        R _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n, A argu) { return null; }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN"
     * f1 -> StmtList()
     * f2 -> "END"
     * f3 -> ( Procedure() )*
     * f4 -> <EOF>
     */
    public R visit(Goal n, A argu) {
        R _ret=null;
        globalCFGs = (HashMap<String, CFG>)argu;
        currentCFG = globalCFGs.get("MAIN");
       // currentCFG.printCFG();
        System.out.println("MAIN[" + currentCFG.numArgs + "]" + "[" +"0" + "]"+"["+currentCFG.maxCallArgs+"]");
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        System.out.println("END");
        if(!currentCFG.stackLocation.isEmpty()){
            System.out.println("//SPILLED");
        }
        else System.out.println("//NOTSPILLED");

        currentCFG = null;
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ( ( Label() )? Stmt() )*
     */
    public R visit(StmtList n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Label()
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> StmtExp()
     */
    public R visit(Procedure n, A argu) {
        R _ret=null;
        //n.f0.accept(this, argu);
        currentCFG = globalCFGs.get(n.f0.f0.tokenImage);
        //currentCFG.printCFG();
        HashSet<String> tset = new HashSet<String>(currentCFG.allocatedRegisters.values());
        ArrayList<String> myArraylist = new ArrayList<String>(tset);
        Collections.sort(myArraylist);
        int x = Math.max(currentCFG.numArgs-4,0);
        for(String str : currentCFG.stackLocation.keySet()){
            int y = currentCFG.stackLocation.get(str)+x;
            currentCFG.stackLocation.put(str,x);

        }
        System.out.println(n.f0.f0.tokenImage + "[" + currentCFG.numArgs + "]" + "[" +( Math.max(0,currentCFG.numArgs-4)+currentCFG.stackLocation.size() + myArraylist.size() ) + "]" + "[" + currentCFG.maxCallArgs + "]");
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);

        int i = 0;

        for(String str : myArraylist){
            System.out.println("ASTORE SPILLEDARG " + (x+currentCFG.stackLocation.keySet().size()+i) + " " + str );
            i++;
        }

        for(int j=0;j<currentCFG.numArgs;j++){
            if(currentCFG.liveranges.get("TEMP " + j) == null) continue;
           if(currentCFG.allocatedRegisters.get("TEMP " + j)!=null){
              if(j<4) System.out.println("MOVE " +currentCFG.allocatedRegisters.get("TEMP " + j) + " a" + j );
              else{
                  System.out.println("ALOAD v0 SPILLEDARG " + (j-4) );
                  System.out.println("MOVE " + currentCFG.allocatedRegisters.get("TEMP " + j) + " v0");

              }
           }
           else{
               if(j<4){
                   System.out.println("ASTORE SPILLEDARG " + currentCFG.stackLocation.get("TEMP " + j) + " a" + j);
               }
               else{
                   System.out.println("ALOAD v0 SPILLEDARG " + (j-4) );
                   System.out.println("ASTORE SPILLEDARG " + currentCFG.stackLocation.get("TEMP " + j) + " v0");

               }
           }


        }


        n.f4.accept(this, argu);
        i=0;
        tset = new HashSet<String>(currentCFG.allocatedRegisters.values());
        for(String str : myArraylist){
            System.out.println("ALOAD "+ str +  " SPILLEDARG " + (currentCFG.stackLocation.keySet().size()+i));
            i++;
        }
        System.out.println("END");
        if(!currentCFG.stackLocation.isEmpty()){
            System.out.println("//SPILLED");
        }
        else System.out.println("//NOTSPILLED");
        return _ret;
    }

    /**
     * f0 -> NoOpStmt()
     *       | ErrorStmt()
     *       | CJumpStmt()
     *       | JumpStmt()
     *       | HStoreStmt()
     *       | HLoadStmt()
     *       | MoveStmt()
     *       | PrintStmt()
     */
    boolean lflag = true;
    public R visit(Stmt n, A argu) {
        R _ret=null;
        lflag = false;
        n.f0.accept(this, argu);
        lflag = true;
        return _ret;
    }

    /**
     * f0 -> "NOOP"
     */
    public R visit(NoOpStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        System.out.println("NOOP");
        return _ret;
    }

    /**
     * f0 -> "ERROR"
     */
    public R visit(ErrorStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        System.out.println("ERROR");
        return _ret;
    }

    /**
     * f0 -> "CJUMP"
     * f1 -> Temp()
     * f2 -> Label()
     */
    public R visit(CJumpStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String str1 = (String) n.f1.accept(this, argu);
        String str2 = (String) n.f2.accept(this, argu);
        String register = currentCFG.allocatedRegisters.get(str1);
        if(register != null){
            System.out.println("CJUMP " + register + " " + currentCFG.procName+"_"+str2);
        }
        else{
            System.out.println("ALOAD " +"v0" + "(SPILLEDARG " + currentCFG.stackLocation.get(str1) + " )" );
            System.out.println("CJUMP v0 "+ currentCFG.procName+"_"+str2);
        }
        return _ret;
    }

    /**
     * f0 -> "JUMP"
     * f1 -> Label()
     */
    public R visit(JumpStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String str = (String) n.f1.accept(this, argu);
        System.out.println("JUMP " + currentCFG.procName+"_"+str);
        return _ret;
    }

    /**
     * f0 -> "HSTORE"
     * f1 -> Temp()
     * f2 -> IntegerLiteral()
     * f3 -> Temp()
     */
    public R visit(HStoreStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String str1 = (String) n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        String str2 = (String) n.f3.accept(this, argu);
        String register1;
        String register2;
        if(currentCFG.allocatedRegisters.get(str1)!=null &&  currentCFG.allocatedRegisters.get(str2)!=null){
            register1 = currentCFG.allocatedRegisters.get(str1);
            register2 = currentCFG.allocatedRegisters.get(str2);
            System.out.println("HSTORE " + register1 + " " + n.f2.f0.tokenImage + " " + register2);
        }
        else if(currentCFG.allocatedRegisters.get(str1)==null &&  currentCFG.allocatedRegisters.get(str2)!=null){
            register2 = currentCFG.allocatedRegisters.get(str2);
            System.out.println("ALOAD v0 (SPILLEDARG " + currentCFG.stackLocation.get(str1) + " )");
            System.out.println("HSTORE " + "v0" + " " + n.f2.f0.tokenImage + " " + register2);
        }
        else if(currentCFG.allocatedRegisters.get(str1)!=null &&  currentCFG.allocatedRegisters.get(str2)==null){
            register1 = currentCFG.allocatedRegisters.get(str1);
            System.out.println("ALOAD v0 (SPILLEDARG " + currentCFG.stackLocation.get(str2) + " )");
            System.out.println("HSTORE " + register1 + " " + n.f2.f0.tokenImage + " " + "v0");
        }
        else if(currentCFG.allocatedRegisters.get(str1)==null &&  currentCFG.allocatedRegisters.get(str2)==null){
            System.out.println("ALOAD v0 (SPILLEDARG " + currentCFG.stackLocation.get(str1) + " )");
            System.out.println("ALOAD v1 (SPILLEDARG " + currentCFG.stackLocation.get(str2) + " )");
            System.out.println("HSTORE " + "v0" + " " + n.f2.f0.tokenImage + " " + "v1");
        }
        return _ret;
    }

    /**
     * f0 -> "HLOAD"
     * f1 -> Temp()
     * f2 -> Temp()
     * f3 -> IntegerLiteral()
     */
    public R visit(HLoadStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String str1 = (String) n.f1.accept(this, argu);
        String str2 = (String) n.f2.accept(this, argu);
        if(currentCFG.liveranges.get(str1)==null) return _ret;
        n.f3.accept(this, argu);
        String register1;
        String register2;
        if(currentCFG.allocatedRegisters.get(str1)!=null &&  currentCFG.allocatedRegisters.get(str2)!=null){
            register1 = currentCFG.allocatedRegisters.get(str1);
            register2 = currentCFG.allocatedRegisters.get(str2);
            System.out.println("HLOAD " + register1 + " "+ register2 + " " + n.f3.f0.tokenImage );
        }
        else if(currentCFG.allocatedRegisters.get(str1)==null &&  currentCFG.allocatedRegisters.get(str2)!=null){
            register2 = currentCFG.allocatedRegisters.get(str2);
            System.out.println("ALOAD v0 (SPILLEDARG " + currentCFG.stackLocation.get(str1) + " )");
            System.out.println("HLOAD " + "v0" + " "+ register2 + " " + n.f3.f0.tokenImage );
        }
        else if(currentCFG.allocatedRegisters.get(str1)!=null &&  currentCFG.allocatedRegisters.get(str2)==null){
            register1 = currentCFG.allocatedRegisters.get(str1);
            System.out.println("ALOAD v0 (SPILLEDARG " + currentCFG.stackLocation.get(str2) + " )");
            System.out.println("HLOAD " + register1 + " "+ "v0" + " " + n.f3.f0.tokenImage );
        }
        else if(currentCFG.allocatedRegisters.get(str1)==null &&  currentCFG.allocatedRegisters.get(str2)==null){
            System.out.println("ALOAD v0 (SPILLEDARG " + currentCFG.stackLocation.get(str1) + " )");
            System.out.println("ALOAD v1 (SPILLEDARG " + currentCFG.stackLocation.get(str2) + " )");
            System.out.println("HLOAD " + "v0" + " "+ "v1" + " " + n.f3.f0.tokenImage );
        }
        return _ret;
    }

    /**
     * f0 -> "MOVE"
     * f1 -> Temp()
     * f2 -> Exp()
     */

    boolean callflag = false;
    boolean sexpflag = false;
    boolean hallocspillflag = false;
    public R visit(MoveStmt n, A argu) {
        R _ret=null;

        n.f0.accept(this, argu);
        String str1 = (String) n.f1.accept(this, argu);
        String str2 = (String) n.f2.accept(this, argu);
        if(currentCFG.liveranges.get(str1)==null) return _ret;
        if(callflag){
            System.out.println(str2);
            if(currentCFG.allocatedRegisters.get(str1)!=null){
                System.out.println("MOVE " + currentCFG.allocatedRegisters.get(str1) + " v0");
            }
            else{
                System.out.println("ASTORE SPILLEDARG " + currentCFG.stackLocation.get(str1) + " " + " v0");
            }
        }
        else if(sexpflag) {

            if (str2.length()>=4 && str2.substring(0, 4).equals("TEMP")) {
                if (currentCFG.allocatedRegisters.get(str1) != null && currentCFG.allocatedRegisters.get(str2)!=null) {
                    System.out.println("MOVE " + currentCFG.allocatedRegisters.get(str1) + " " + currentCFG.allocatedRegisters.get(str2));
                }
                else if(currentCFG.allocatedRegisters.get(str1) == null && currentCFG.allocatedRegisters.get(str2)!=null) {
                    System.out.println("ASTORE SPILLEDARG " +  currentCFG.stackLocation.get(str1)+ " " + currentCFG.allocatedRegisters.get(str2));
                }
                else if(currentCFG.allocatedRegisters.get(str1) != null && currentCFG.allocatedRegisters.get(str2)==null) {
                    System.out.println("ALOAD v0 SPILLEDARG " + currentCFG.stackLocation.get(str2));
                    System.out.println("MOVE " + currentCFG.allocatedRegisters.get(str1) + " v0");
                }

                else if(currentCFG.allocatedRegisters.get(str1) == null && currentCFG.allocatedRegisters.get(str2)==null) {
                    System.out.println("ALOAD v0 SPILLEDARG " + currentCFG.stackLocation.get(str2));
                    System.out.println("ASTORE SPILLEDARG " + currentCFG.stackLocation.get(str1) + " v0");
                }
            }
        }

        else if(hallocspillflag){
            System.out.println(str2);
            if(currentCFG.allocatedRegisters.get(str1)!=null){
                System.out.println("MOVE " + currentCFG.allocatedRegisters.get(str1) + " v0");
            }
            else{
                System.out.println("ASTORE  SPILLEDARG " + currentCFG.stackLocation.get(str1) + " v0");
            }

        }

        else{
            if(currentCFG.allocatedRegisters.get(str1)!=null){
                System.out.println("MOVE " + currentCFG.allocatedRegisters.get(str1)+ " " + str2);
            }
            else if(currentCFG.allocatedRegisters.get(str1)==null){
                System.out.println("ASTORE SPILLEDARG " + currentCFG.stackLocation.get(str1) + " " + str2);
            }
        }

        callflag = false;
        sexpflag = false;
        hallocspillflag = false;


        return _ret;
    }

    /**
     * f0 -> "PRINT"
     * f1 -> SimpleExp()
     */
    public R visit(PrintStmt n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        String str = (String) n.f1.accept(this, argu);
        if(str.length()>=4 && str.substring(0,4).equals("TEMP")){
            if(currentCFG.allocatedRegisters.get(str)!=null){
                System.out.println("PRINT " + currentCFG.allocatedRegisters.get(str));
            }
            else{
                System.out.println("ALOAD v0 (SPILLEDARG " +currentCFG.stackLocation.get(str) + " )" );
                System.out.println("PRINT v0");
            }
        }
        else System.out.println("PRINT " + str);
        return _ret;
    }

    /**
     * f0 -> Call()
     *       | HAllocate()
     *       | BinOp()
     *       | SimpleExp()
     */
    public R visit(Exp n, A argu) {
        R _ret=null;
        if(n.f0.which == 3) sexpflag = true;
        _ret = n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "BEGIN"
     * f1 -> StmtList()
     * f2 -> "RETURN"
     * f3 -> SimpleExp()
     * f4 -> "END"
     */
    public R visit(StmtExp n, A argu) {
        R _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);

        String str = (String) n.f3.accept(this, argu);
        if(str.length()>=4 && str.substring(0,4).equals("TEMP")){
            if(currentCFG.allocatedRegisters.get(str)!=null){
                System.out.println("MOVE v0 " + currentCFG.allocatedRegisters.get(str));
            }
            else{
                System.out.println("ALOAD v0 (SPILLEDARG " +currentCFG.stackLocation.get(str) + " )" );
                System.out.println("MOVE v0 v0" );
            }
        }
        else System.out.println("MOVE v0 " + str);

        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "CALL"
     * f1 -> SimpleExp()
     * f2 -> "("
     * f3 -> ( Temp() )*
     * f4 -> ")"
     */
    public R visit(Call n, A argu) {
        R _ret=null;
        callflag = true;
        n.f0.accept(this, argu);
        String sexp = (String) n.f1.accept(this, argu);
        n.f2.accept(this, argu);

        ArrayList<String> params = (ArrayList<String>) n.f3.accept(this, argu);
        String res = "";
        if(params.size()<=4){
            int i = 0;
            for(String str : params){
                if(currentCFG.allocatedRegisters.get(str)!=null){
                    res = res + "MOVE a" + i + " " + currentCFG.allocatedRegisters.get(str) + "\n";
                    i++;
                }
                if(currentCFG.allocatedRegisters.get(str)==null){
                    res = res + "MOVE v0 " + currentCFG.stackLocation.get(str) + "\n";
                    res = res + "MOVE a" + i + " " + "v0\n";
                    i++;
                }
            }
        }

        else{
            int i = 0;
            int j = 1;
            for(String str : params){
                if(i<=3) {
                    if (currentCFG.allocatedRegisters.get(str) != null) {
                        res = res + "MOVE a" + i + " " + currentCFG.allocatedRegisters.get(str) + "\n";
                        i++;
                    }
                    if (currentCFG.allocatedRegisters.get(str) == null) {
                        res = res + "MOVE v0 " + currentCFG.stackLocation.get(str) + "\n";
                        res = res + "MOVE a" + i + " " + "v0\n";
                        i++;
                    }
                }
                else{

                    if (currentCFG.allocatedRegisters.get(str) != null) {
                        res = res + " PASSARG " + j + " " + currentCFG.allocatedRegisters.get(str) + "\n";
                        j++;
                    }
                    if (currentCFG.allocatedRegisters.get(str) == null) {
                        res = res + "MOVE v0 " + currentCFG.stackLocation.get(str) + "\n";
                        res = res + " PASSARG " + j + " " + "v0\n";
                        j++;
                    }
                }
            }
        }

        if(sexp.length()>=4 && sexp.substring(0,4).equals("TEMP")){
            if(currentCFG.allocatedRegisters.get(sexp)!=null){
                res = res + "CALL " + currentCFG.allocatedRegisters.get(sexp) +"\n";
            }
            else{
                res = res + "ALOAD v0 (SPILLEDARG " + currentCFG.stackLocation.get(sexp) + " )\n";
                res = res + "CALL v0";
            }
        }


        n.f4.accept(this, argu);
        _ret = (R)res;
        return _ret;
    }

    /**
     * f0 -> "HALLOCATE"
     * f1 -> SimpleExp()
     */
    public R visit(HAllocate n, A argu) {
        R _ret=null;
        String res = "";
        n.f0.accept(this, argu);
        String str = (String) n.f1.accept(this, argu);

        if(str.length()>=4 && str.substring(0,4).equals("TEMP")){
            if(currentCFG.allocatedRegisters.get(str)!=null){
                res = res +"HALLOCATE " + currentCFG.allocatedRegisters.get(str) + "\n";
            }
            else{
                hallocspillflag = true;
                res = res + "ALOAD v0 (SPILLED " + currentCFG.stackLocation.get(str) + " )\n";
                res = res + "HALLOCATE v0\n";
            }

        }
        else{
            res = res+ "HALLOCATE " + str;
        }
        _ret = (R)res;
        return _ret;
    }

    /**
     * f0 -> Operator()
     * f1 -> Temp()
     * f2 -> SimpleExp()
     */
    public R visit(BinOp n, A argu) {
        R _ret=null;
        String res = "";
        String str1 = (String)n.f0.accept(this, argu);
        res = res + str1 + " ";
        String str2 = (String) n.f1.accept(this, argu);
        String str3 = (String) n.f2.accept(this, argu);
        boolean tflag = false;

        if(currentCFG.allocatedRegisters.get(str2)!=null){
            res = res + " " + currentCFG.allocatedRegisters.get(str2) + "\n";
        }
        else{
            tflag = true;
            res = res + " ALOAD v0 (SPILLEDARG " + currentCFG.stackLocation.get(str2) + " )\n";
            res = res + "v0";
        }

        if(str3.length() >= 4 && str3.substring(0,4).equals("TEMP")){
            if(currentCFG.allocatedRegisters.get(str3)!=null){
                res = res + currentCFG.allocatedRegisters.get(str3) + "\n";
            }
            else{
                int i=0;
                if(tflag) i = 1;
                res = res + "ALOAD v" + i + " (SPILLED " + currentCFG.stackLocation.get(str3) + " )\n";
                res = res + "v" + i;
            }

        }
        else{
            res = res + str3;
        }

        _ret = (R)res;

        return _ret;
    }

    /**
     * f0 -> "LE"
     *       | "NE"
     *       | "PLUS"
     *       | "MINUS"
     *       | "TIMES"
     *       | "DIV"
     */
    public R visit(Operator n, A argu) {
        R _ret=null;
        String res = "";
        n.f0.accept(this, argu);
        if(n.f0.which == 0) res = "LE";
        else if(n.f0.which == 1) res = "NE";
        else if(n.f0.which == 2) res = "PLUS";
        else if(n.f0.which == 3) res = "MINUS";
        else if(n.f0.which == 4) res = "TIMES";
        else  res = "DIV";
        _ret = (R)res;
        return _ret;
    }

    /**
     * f0 -> Temp()
     *       | IntegerLiteral()
     *       | Label()
     */
    public R visit(SimpleExp n, A argu) {
        R _ret=null;
        if(n.f0.which != 0) sexpflag = false;
        _ret = (R) n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "TEMP"
     * f1 -> IntegerLiteral()
     */
    public R visit(Temp n, A argu) {
        R _ret=null;

        String str = "";
        str = "TEMP " + n.f1.f0.tokenImage;
        _ret = (R)str;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n, A argu) {
        R _ret=null;
        String str = n.f0.tokenImage;
        n.f0.accept(this, argu);
        _ret = (R)str;
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Label n, A argu) {
        R _ret=null;
        String str = "";
        str = n.f0.tokenImage;
        _ret = (R)str;
        if(lflag) {
            System.out.println(currentCFG.procName + "_"+str);
        }
        n.f0.accept(this, argu);
        return _ret;
    }

}

